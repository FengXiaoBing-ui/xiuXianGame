const surnames = [
  '王', '李', '张', '刘', '陈', '杨', '黄', '吴', '赵', '周',
  '徐', '孙', '马', '朱', '胡', '郭', '何', '高', '林', '罗',
  '郑', '梁', '谢', '宋', '唐', '许', '韩', '冯', '邓', '曹',
  '彭', '曾', '肖', '田', '董', '袁', '潘', '于', '蒋', '蔡',
  '余', '杜', '叶', '程', '苏', '魏', '吕', '丁', '任', '沈',
  '姚', '卢', '姜', '崔', '钟', '谭', '陆', '汪', '范', '金',
  '石', '廖', '贾', '夏', '韦', '傅', '方', '白', '邹', '孟',
  '熊', '秦', '邱', '江', '尹', '薛', '闫', '段', '雷', '侯',
  '龙', '史', '陶', '黎', '贺', '顾', '毛', '郝', '龚', '邵',
  '万', '钱', '严', '覃', '武', '戴', '莫', '孔', '向', '汤',
  '欧阳', '太史', '端木', '上官', '司马', '东方', '西门', '南宫', '北野', '钟离'
];

const males = [
  "宇", "轩", "泽", "晨", "皓", "睿", "宸", "铭", "俊", "恒", "峰", "博", "豪", "哲",
  "梓", "涛", "岩", "锦", "朗", "飞", "鹏", "超", "琪", "辉", "阳", "风", "星",
  "林", "松", "柏", "江", "山", "川", "河", "海", "天", "行", "逸", "翔", "远",
  "高", "明", "新", "清", "泉", "石", "剑", "书", "文", "武", "英", "刚",
  "伟", "宏", "盛", "兴", "达", "成", "安", "康", "宁", "平", "顺", "和", "泰", "祥",
  "福", "禄", "寿", "喜", "财", "贵", "荣", "华", "德", "仁", "义", "礼", "智", "信",
  "忠", "孝", "友", "诚", "敬", "谦", "谨", "慎", "勤", "勉", "坚"
];

const girls = [
  "悦", "萱", "诗", "涵", "雨", "晴", "婉", "清", "妍", "静", "怡", "思", "梦", "琪",
  "嘉", "依", "琳", "彤", "雅", "晨", "薇", "莉", "芳", "颖", "月", "梅", "兰",
  "竹", "菊", "柳", "荷", "萍", "翠", "红", "丹", "凤", "云"
]

/**
 * 
 * @param {性别} gender 男：1，女：0
 * @returns 
 */
function generateName(gender = 1) {
  const surname = surnames[Math.floor(Math.random() * surnames.length)];
  let name;
  if (gender === 1) {
    name = males[Math.floor(Math.random() * males.length)];
  } else if (gender === 0) {
    name = girls[Math.floor(Math.random() * girls.length)];
  } else {
    throw new Error('Invalid gender');
  }
  return surname + name;
}

export { surnames, males, girls, generateName };
